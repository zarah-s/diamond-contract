const ethers = require("ethers");
const path = require("path/posix");

const args = process.argv.slice(2);

if (args.length != 1) {
  console.log(`please supply the correct parameters:
    facetName
  `);
  process.exit(1);
}

async function printSelectors(contractName, artifactFolderPath = "../out") {
  const contractFilePath = path.join(
    artifactFolderPath,
    `${contractName}.sol`,
    `${contractName}.json`
  );
  const contractArtifact = require(contractFilePath);
  const abi = contractArtifact.abi;
  const bytecode = contractArtifact.bytecode;
  const target = new ethers.ContractFactory(
    abi,
    "608060405234801561001057600080fd5b5061034c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a5780639977c78a146100965780639e3b34bf146100c6578063b90dc8ff146100e4575b600080fd5b6100646100ee565b60405161007191906101de565b60405180910390f35b610094600480360381019061008f919061022a565b6100f7565b005b6100b060048036038101906100ab919061022a565b610101565b6040516100bd9190610298565b60405180910390f35b6100ce610140565b6040516100db91906101de565b60405180910390f35b6100ec610146565b005b60008054905090565b8060008190555050565b6001818154811061011157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600260008282546101bc91906102e2565b92505081905550565b6000819050919050565b6101d8816101c5565b82525050565b60006020820190506101f360008301846101cf565b92915050565b600080fd5b610207816101c5565b811461021257600080fd5b50565b600081359050610224816101fe565b92915050565b6000602082840312156102405761023f6101f9565b5b600061024e84828501610215565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061028282610257565b9050919050565b61029281610277565b82525050565b60006020820190506102ad6000830184610289565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006102ed826101c5565b91506102f8836101c5565b92508282019050808211156103105761030f6102b3565b5b9291505056fea2646970667358221220df8a904c09b89281cbad4081261889b8308b074eb4248724c2811458a3fb6b1364736f6c63430008120033"
  );
  const signatures = Object.keys(target.interface.functions);

  const selectors = signatures.reduce((acc, val) => {
    if (val !== "init(bytes)") {
      acc.push(target.interface.getSighash(val));
    }
    return acc;
  }, []);

  const coder = ethers.utils.defaultAbiCoder;
  const coded = coder.encode(["bytes4[]"], [selectors]);

  process.stdout.write(coded);
}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
printSelectors(args[0], args[1])
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
